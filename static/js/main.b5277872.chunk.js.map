{"version":3,"sources":["constants/constants.js","components/styled.js","data/tileTypes.js","data/itemTypes.js","helpers/tileFunctions.js","helpers/moveFunctions.js","data/entityTypes.js","App.jsx","serviceWorker.js","index.js"],"names":["MAX_TILES","MAX_WORLD_WIDTH","MAX_WORLD_HEIGHT","TileContainer","styled","div","_templateObject","concat","Tile","_templateObject2","props","tile","lighting","tileTypes","wall","name","char","img","ground","dirt","tree","rock","portal","itemTypes","dungeonGenerator","roomSize","currentFloorPlayerLoc","oldRoom","dungeonRows","NewDungeon","width","height","minRoomSize","maxRoomSize","map","row","index","i","rowIndex","rowMultiplier","id","x","y","checkTileType","push","room","Object","toConsumableArray","Set","flattenDeep","filter","g","addStairs","addRandomTiles","addRandomItems","curRoom","type","t","randomTile","Math","floor","random","randomItem","length","contains","newTiles","allGroundTiles","freeLocation","freeLocationIndex","indexOf","changePlayerPosition","player","entities","move","tiles","currentFloor","nextTile","find","nextEntity","e","roomId","ent","checkNextTileCollide","entityTypes","Wrapper","App_templateObject","Menu","App_templateObject2","App","state","currentRoom","currentRoomId","allRooms","allEntities","loading","currentTurn","playerTurn","othersTurn","currentTile","keyPress","hoveredTile","changeRooms","_this","setState","generateRooms","roomAmount","rooms","currentFloorStairLoc","en","entity","k","addPlayerOnStart","entityGenerator","flatten","fireKey","event","key","checkHold","_this$state","Player","editEntities","updateTurn","releaseKeys","_this$state2","playerLocation","playerTile","handleEntityTurn","flattenedEntities","randomEntity","console","log","produceEntityOnScreen","tileId","_this$state3","sentEntity","generateLighting","_this$state4","tileX","tileY","entityTile","entityX","entityY","checkRange","distance","p","q","dx","dy","sqrt","xy","min","max","findPath","clickedTile","entType","_this$state5","oneDimensionalRoom","grid","lodash","chunk","easystar","EasyStar","js","setGrid","setAcceptableTiles","path","moveEntityByPath","calculate","handleHover","handleTileClick","_callee","updatedPath","_this$state6","entityToMove","entityToMoveIndex","regenerator_default","a","wrap","_context","prev","next","assign","defineProperty","stop","_callee2","_this$state7","_context2","_this2","this","document","addEventListener","prevProps","prevState","_this$state8","playerIndex","nextProps","nextState","_this3","_this$state9","react_default","createElement","className","onClick","onMouseOver","src","alt","toString","JSON","stringify","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b5277872.chunk.js","sourcesContent":["export const MAX_TILES = 60; //MUST BE EVEN NUMBER\nexport const MAX_WORLD_WIDTH = MAX_TILES / 2;\nexport const MAX_WORLD_HEIGHT = (MAX_WORLD_WIDTH * MAX_TILES) / 2;\nexport const TILE_SIZE = 12;\n","import styled from \"styled-components\";\nimport { MAX_WORLD_WIDTH, TILE_SIZE, MAX_TILES } from \"../constants/constants\";\n\nexport const TileContainer = styled.div`\n  align-self: center;\n  display: grid;\n  grid-template-columns: ${`repeat(${MAX_WORLD_WIDTH}, ${TILE_SIZE}px)`};\n  overflow: hidden;\n`;\n\nexport const Tile = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-content: center;\n  justify-content: center;\n  text-align: center;\n  z-index: 0;\n  height: ${`${TILE_SIZE}px`};\n  width: ${`${TILE_SIZE}px`};\n  font-size: ${`${TILE_SIZE * 0.8}px`};\n  background-color: ${props => {\n    switch (props.tile) {\n      //TILES\n      case \"wall\":\n        return \"black\";\n      case \"ground\":\n        return \"green\";\n      case \"dirt\":\n        return \"burlywood\";\n      case \"rock\":\n        return \"grey\";\n      case \"tree\":\n        return \"darkgreen\";\n      //ENTITIES\n      case \"player\":\n        return \"black\";\n      case \"rat\":\n        return \"black\";\n      case \"cat\":\n        return \"black\";\n      //ITEMS\n      case \"apple\":\n        return \"green\";\n      case \"orange\":\n        return \"green\";\n      case \"stone\":\n        return \"green\";\n      default:\n        break;\n    }\n  }};\n  color: ${props => {\n    switch (props.tile) {\n      //TILES\n      case \"wall\":\n        return \"grey\";\n      case \"ground\":\n        return \"darkgreen\";\n      case \"dirt\":\n        return \"brown\";\n      case \"rock\":\n        return \"darkgrey\";\n      case \"tree\":\n        return \"green\";\n      //ENTITIES\n      case \"player\":\n        return \"orange\";\n      case \"rat\":\n        return \"red\";\n      case \"cat\":\n        return \"brown\";\n      //ITEMS\n      case \"apple\":\n        return \"red\";\n      case \"orange\":\n        return \"orange\";\n      case \"stone\":\n        return \"brown\";\n      default:\n        break;\n    }\n  }};\n  clip-path: ${props => {\n    switch (props.tile) {\n      //ENTITIES\n      case \"player\":\n        return \"clip-path: rect(50% 5%, 0% 100%, 100% 100%)\";\n      default:\n        break;\n    }\n  }};\n  .light {\n    position: absolute;\n    z-index: 10;\n    background-color: ${props => `rgba(0, 0, 0, ${props.lighting})`};\n    height: ${`${TILE_SIZE}px`};\n    width: ${`${TILE_SIZE}px`};\n    top: 0;\n    left: 0;\n  }\n  &:hover {\n    opacity: 0.8;\n  }\n  .sprite-image {\n    object-fit: cover;\n    height: ${`${TILE_SIZE}px`};\n    width: ${`${TILE_SIZE}px`};\n  }\n`;\n","export const tileTypes = {\n  wall: { name: 'wall', char: 'X', img: null },\n  ground: { name: 'ground', char: 'v', img: null },\n  dirt: { name: 'dirt', char: '^', img: null },\n  tree: { name: 'tree', char: 'T', img: null },\n  rock: { name: 'rock', char: 'M', img: null },\n  portal: { name: 'portal', char: 'Z', img: null },\n}","export const itemTypes = [\n  { name: 'apple', char: '9', img: null },\n  { name: 'orange', char: '0', img: null },\n  { name: 'stone', char: '.', img: null },\n  { name: 'sword', char: '/', img: null },\n]","import { MAX_WORLD_HEIGHT, MAX_TILES } from \"../constants/constants\";\nimport { tileTypes } from \"../data/tileTypes\";\nimport { itemTypes } from \"../data/itemTypes\";\nimport { NewDungeon } from \"random-dungeon-generator\";\nimport { flattenDeep } from \"lodash\";\n\nconst checkTileType = (tile, i, rowIndex) => {\n  var rowMultiplier = rowIndex >= 1 ? (rowIndex * MAX_TILES) / 2 - 1 : rowIndex;\n  switch (tile) {\n    case 0:\n      return {\n        id: i + 1 + rowMultiplier,\n        tile: tileTypes.ground,\n        x: i,\n        y: rowIndex\n      };\n    case 1:\n      return {\n        id: i + 1 + rowMultiplier,\n        tile: tileTypes.wall,\n        x: i,\n        y: rowIndex\n      };\n    default:\n      return {\n        id: i + 1 + rowMultiplier,\n        tile: tileTypes.ground,\n        x: i,\n        y: rowIndex\n      };\n  }\n};\n\nexport const dungeonGenerator = (roomSize, currentFloorPlayerLoc) => {\n  const dungeon = NewDungeon({\n    width: MAX_TILES / 2,\n    height: MAX_TILES / 2,\n    minRoomSize: 10,\n    maxRoomSize: 10\n  });\n  let oldRoom = [];\n\n  const dungeonRows = dungeon.map((row, index) => {\n    return row.map((tile, i) => {\n      return checkTileType(tile, i, index);\n    });\n  });\n  oldRoom.push(dungeonRows);\n  let room = [...new Set(flattenDeep(oldRoom.filter(g => g)))];\n  room = flattenDeep(room);\n  room = addStairs(room, \"portal\", currentFloorPlayerLoc);\n  room = addRandomTiles(room, \"rock\");\n  room = addRandomTiles(room, \"tree\");\n  room = addRandomTiles(room, \"rock\");\n  room = addRandomTiles(room, \"tree\");\n  room = addRandomTiles(room, \"dirt\");\n  room = addRandomTiles(room, \"dirt\");\n  room = addRandomItems(room);\n  room = addRandomItems(room);\n  room = addRandomItems(room);\n  return room;\n};\n\nexport const addRandomTiles = (curRoom, type) => {\n  const mappedTiles = curRoom.map(t => {\n    let randomTile = Math.floor(Math.random() * (MAX_WORLD_HEIGHT - 1 + 1)) + 1;\n    if (t.tile.name !== \"wall\") {\n      if (\n        t.id === randomTile + 1 ||\n        (t.id === randomTile - 1 || t.id === randomTile)\n      ) {\n        return {\n          x: t.x,\n          y: t.y,\n          id: t.id,\n          tile: tileTypes[type]\n        };\n      } else return t;\n    } else return t;\n  });\n  return mappedTiles;\n};\n\nexport const addRandomItems = curRoom => {\n  const mappedTiles = curRoom.map(t => {\n    const type = t.tile.name;\n    let randomItem = Math.floor(Math.random() * itemTypes.length) + 0;\n    let randomTile = Math.floor(Math.random() * MAX_WORLD_HEIGHT) + 1;\n    if (t.tile.name !== \"wall\") {\n      if (\n        t.id === randomTile + 1 ||\n        (t.id === randomTile - 1 || t.id === randomTile)\n      ) {\n        return {\n          x: t.x,\n          y: t.y,\n          id: t.id,\n          tile: tileTypes[type],\n          contains: itemTypes[randomItem]\n        }; // change to object\n      } else return t;\n    } else return t;\n  });\n  return mappedTiles;\n};\n\nexport const addStairs = (curRoom, type, currentFloorPlayerLoc) => {\n  let newTiles = curRoom;\n  const allGroundTiles = newTiles.filter(g => g.tile.name === \"ground\");\n  var freeLocation =\n    allGroundTiles[Math.floor(Math.random() * allGroundTiles.length)];\n  const freeLocationIndex = newTiles.indexOf(freeLocation);\n  if (freeLocation.contains || freeLocation.id === currentFloorPlayerLoc) {\n    return addStairs(curRoom, type);\n  }\n  newTiles[freeLocationIndex].tile = tileTypes[type];\n  return newTiles;\n};\n","export const checkNextTileCollide = nextTile => {\n  switch (nextTile) {\n    case \"tree\":\n      return true;\n    case \"wall\":\n      return true;\n    default:\n      break;\n  }\n};\n\nexport const changePlayerPosition = (\n  player,\n  entities,\n  move,\n  tiles,\n  currentFloor\n) => {\n  const nextTile = tiles.find(t => t.id === player.id + move);\n  const nextEntity = entities.find(\n    e => e.id === nextTile.id && e.roomId === currentFloor\n  );\n  const newEntities = entities.map(ent => {\n    if (\n      nextTile &&\n      ent.id === player.id &&\n      !checkNextTileCollide(\n        nextTile.tile ? nextTile.tile.name : nextTile.contains.name\n      ) &&\n      !nextEntity\n    ) {\n      ent.id += move;\n    }\n    return ent;\n  });\n  return newEntities;\n};\n","export const entityTypes = [\n  { type: \"rat\", char: \"~o\", img: null },\n  { type: \"bat\", char: \"~x~\", img: null },\n  { type: \"cat\", char: \"~m\", img: null }\n];\n","import React, { Component } from \"react\";\nimport lodash from \"lodash\";\nimport EasyStar from \"easystarjs\";\nimport {\n  MAX_WORLD_WIDTH,\n  MAX_WORLD_HEIGHT,\n  MAX_TILES\n} from \"./constants/constants\";\nimport styled from \"styled-components\";\nimport { TileContainer, Tile } from \"./components/styled\";\nimport { dungeonGenerator } from \"./helpers/tileFunctions\";\nimport { changePlayerPosition } from \"./helpers/moveFunctions\";\nimport { flatten } from \"lodash\";\nimport { entityTypes } from \"./data/entityTypes\";\n\nconst Wrapper = styled.div`\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-content: center;\n`;\n\nconst Menu = styled.div`\n  align-content: center;\n  justify-content: center;\n  text-align: center;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  font-size: 0.7rem;\n  flex: 1;\n  .location {\n    height: 80px;\n    word-wrap: break-word;\n    padding: 10px;\n  }\n  .controls {\n    button {\n      font-size: 0.4rem;\n      margin: 20px;\n      height: 20px;\n      width: 40px;\n      border: 2px solid black;\n    }\n  }\n`;\n\nclass App extends Component {\n  state = {\n    currentRoom: [],\n    currentRoomId: 0,\n    allRooms: [],\n    allEntities: [],\n    loading: false,\n    currentTurn: 0,\n    playerTurn: true,\n    othersTurn: false,\n    currentTile: \"\",\n    keyPress: false,\n    hoveredTile: {}\n  };\n\n  //ADDS TILES AND ADDS EVENT LISTENERS FOR KEYS\n  componentDidMount() {\n    this.setState({ rooms: this.generateRooms(MAX_WORLD_HEIGHT, 11) }, () => {\n      //AMOUNT OF ROOMS IS -1;\n      this.setState({\n        currentRoom: this.state.allRooms[this.state.currentRoomId]\n      });\n    });\n    document.addEventListener(\"DOMContentLoaded\", () => {\n      document.addEventListener(\"keydown\", event => {\n        if (!this.state.keyPress) this.fireKey(event, false, true);\n      });\n      document.addEventListener(\"keyup\", event => {\n        this.releaseKeys(event);\n      });\n    });\n  }\n\n  changeRooms = () => {\n    if (this.state.currentRoomId < this.state.allRooms.length - 1)\n      this.setState(\n        { currentRoomId: this.state.currentRoomId + 1, loading: true },\n        () => {\n          this.setState({\n            currentRoom: this.state.allRooms[this.state.currentRoomId],\n            loading: false\n          });\n        }\n      );\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    const { allEntities, currentRoom } = this.state;\n    const playerLocation =\n      allEntities.length &&\n      allEntities.find(e => e.entity.type === \"player\").id;\n    const downLocation =\n      currentRoom &&\n      currentRoom.room &&\n      currentRoom.room.find(t => t.tile.name === \"portal\").id;\n    if (playerLocation === downLocation && this.state.loading === false) {\n      this.changeRooms();\n    }\n    if (prevState.currentRoomId !== this.state.currentRoomId) {\n      let player = allEntities.find(ent => ent.entity.type === \"player\");\n      const playerIndex = allEntities.indexOf(player);\n      this.setState({\n        allEntities: Object.assign([...allEntities], {\n          [playerIndex]: {\n            roomId: this.state.currentRoomId,\n            id: player.id,\n            entity: player.entity\n          }\n        })\n      });\n    }\n  }\n\n  generateRooms = (roomSize, roomAmount) => {\n    const { allEntities } = this.state;\n    var rooms = [];\n    var entities = [];\n    var i = 0;\n    const currentFloorStairLoc =\n      (rooms.length && rooms[i].find(t => t.tile.name === \"portal\").id) || null;\n    const currentFloorPlayerLoc =\n      (allEntities.length &&\n        allEntities.find(en => en.entity.type === \"player\").id) ||\n      null;\n    for (i = 0; i < roomAmount; i++) {\n      rooms.push({\n        roomId: i,\n        room: dungeonGenerator(\n          roomSize,\n          currentFloorStairLoc,\n          currentFloorPlayerLoc\n        )\n      });\n    }\n    return this.setState({ allRooms: rooms }, () => {\n      //Generate All Entities for floor.\n      var k = 0;\n      for (k = 0; k < roomAmount; k++) {\n        if (k === 0) {\n          entities.push(this.addPlayerOnStart(this.state.allRooms[k].room));\n        }\n        entities.push(this.entityGenerator(this.state.allRooms[k].room, k));\n        entities.push(this.entityGenerator(this.state.allRooms[k].room, k));\n        entities.push(this.entityGenerator(this.state.allRooms[k].room, k));\n      }\n      this.setState({ allEntities: flatten(entities) });\n    });\n  };\n\n  //PLAYER KEYS\n  fireKey = (event, key, checkHold) => {\n    const {\n      allEntities,\n      currentRoom,\n      currentRoomId,\n      keyPress,\n      playerTurn\n    } = this.state;\n    if (playerTurn) {\n      if (checkHold) {\n        //Checks if user is holding key\n        this.setState({ keyPress: true });\n      }\n      let Player = allEntities.find(ent => ent.entity.type === \"player\");\n      if (\n        key === \"ArrowUp\" ||\n        (event.key === \"ArrowUp\" && keyPress === false)\n      ) {\n        this.setState({\n          editEntities: changePlayerPosition(\n            Player,\n            allEntities,\n            -MAX_WORLD_WIDTH,\n            currentRoom.room,\n            currentRoomId\n          )\n        });\n        this.updateTurn();\n      } else if (\n        key === \"ArrowDown\" ||\n        (event.key === \"ArrowDown\" && keyPress === false)\n      ) {\n        this.setState({\n          editEntities: changePlayerPosition(\n            Player,\n            allEntities,\n            MAX_WORLD_WIDTH,\n            currentRoom.room,\n            currentRoomId\n          )\n        });\n        this.updateTurn();\n      } else if (\n        key === \"ArrowRight\" ||\n        (event.key === \"ArrowRight\" && keyPress === false)\n      ) {\n        this.setState({\n          editEntities: changePlayerPosition(\n            Player,\n            allEntities,\n            1,\n            currentRoom.room,\n            currentRoomId\n          )\n        });\n        this.updateTurn();\n      } else if (\n        key === \"ArrowLeft\" ||\n        (event.key === \"ArrowLeft\" && keyPress === false)\n      ) {\n        this.setState({\n          editEntities: changePlayerPosition(\n            Player,\n            allEntities,\n            -1,\n            currentRoom.room,\n            currentRoomId\n          )\n        });\n        this.updateTurn();\n      }\n    }\n  };\n  //PLAYER KEYS\n  releaseKeys = () => {\n    this.setState({ keyPress: false });\n  };\n\n  updateTurn = () => {\n    const { allEntities, currentRoom } = this.state;\n    const playerLocation = allEntities.find(e => e.entity.type === \"player\");\n    //this method also stores the current player tile every turn;\n    const playerTile = currentRoom.room.find(t => t.id === playerLocation.id);\n    this.setState(\n      {\n        playerTurn: !this.state.playerTurn,\n        currentTurn: this.state.currentTurn + 1,\n        currentTile: playerTile\n      },\n      () => {\n        if (!this.state.playerTurn) {\n          this.handleEntityTurn();\n        }\n      }\n    );\n  };\n\n  entityGenerator = (curRoom, roomId) => {\n    const entities = curRoom.map(t => {\n      let randomEntity = Math.floor(Math.random() * entityTypes.length) + 0;\n      let randomTile = Math.floor(Math.random() * MAX_TILES) + 1;\n      if (t.tile.name !== \"wall\") {\n        if (t.id === randomTile) {\n          return { roomId, id: t.id, entity: entityTypes[randomEntity] }; // change to object\n        } else return null;\n      } else return null;\n    });\n    const flattenedEntities = entities.filter(e => e);\n    console.log(flattenedEntities);\n    return flattenedEntities;\n  };\n\n  addPlayerOnStart = curRoom => {\n    const allGroundTiles = curRoom.filter(g => g.tile.name !== \"wall\"); //TODO: fix this so player is not on bad tile\n    var freeLocation =\n      allGroundTiles[Math.floor(Math.random() * allGroundTiles.length) + 1];\n    if (!freeLocation.contains) {\n      return {\n        roomId: this.state.currentRoomId,\n        id: freeLocation.id,\n        entity: { type: \"player\", char: \"@\", img: null }\n      };\n    }\n  };\n\n  produceEntityOnScreen = tileId => {\n    const { allEntities, currentRoomId } = this.state;\n    const sentEntity = allEntities.find(ent => {\n      if (\n        ent &&\n        ent.id &&\n        ent.id === tileId &&\n        currentRoomId === ent.roomId &&\n        ent.type !== \"player\"\n      ) {\n        return ent.entity;\n      }\n      if (ent && ent.id && ent.id === tileId && ent.type === \"player\") {\n        return ent.entity;\n      }\n    });\n    if (sentEntity) return sentEntity;\n  };\n\n  shouldComponentUpdate(nextProps, nextState) {\n    //THIS IS RENDERING CONTROL to prevent un-needed re-renders\n    if (this.state.currentTurn !== nextState.currentTurn) {\n      return true;\n    } else if (this.state.loading !== nextState.loading) {\n      return true;\n    } else if (this.state.currentRoom !== nextState.currentRoom) {\n      return true;\n    } else if (this.state.allEntities !== nextState.allEntities) {\n      return true;\n    }\n    return false;\n  }\n\n  generateLighting = tileId => {\n    const { allEntities, currentRoom } = this.state;\n    const lightMax = 8;\n    const currentTile =\n      currentRoom &&\n      currentRoom.room &&\n      currentRoom.room.find(t => t.id === tileId);\n    const tileX = currentTile.x;\n    const tileY = currentTile.y;\n    const entity =\n      allEntities && allEntities.find(e => e.entity.type === \"player\");\n    const entityTile =\n      currentRoom &&\n      currentRoom.room &&\n      currentRoom.room.find(t => t.id === entity.id);\n    const entityX = entityTile.x;\n    const entityY = entityTile.y;\n    if (entity.id === tileId) {\n      return 0;\n    }\n    if (\n      this.checkRange(tileX, entityX - lightMax, entityX + lightMax) &&\n      this.checkRange(tileY, entityY - lightMax, entityY + lightMax)\n    ) {\n      return this.distance(entityTile, currentTile) / 10; //CALCULATES LIGHTING SHADE\n    } else return 1;\n  };\n\n  distance = (p, q) => {\n    var dx = p.x - q.x;\n    var dy = p.y - q.y;\n    var dist = Math.sqrt(dx * dx + dy * dy);\n    return dist;\n  };\n\n  checkRange = (xy, min, max) => {\n    return (xy - min) * (xy - max) <= 0;\n  };\n\n  //PATHFINDING\n  findPath = (clickedTile, entType) => {\n    const { allEntities, currentRoom } = this.state;\n    const entity =\n      allEntities && allEntities.find(e => e.entity.type === entType);\n    const entityTile =\n      currentRoom &&\n      currentRoom.room &&\n      currentRoom.room.find(t => t.id === entity.id);\n    const entityX = entityTile.x;\n    const entityY = entityTile.y;\n    const oneDimensionalRoom =\n      currentRoom &&\n      currentRoom.room &&\n      currentRoom.room.map(t => {\n        if (t.tile.name !== \"wall\") {\n          return 0;\n        } else return 1;\n      });\n    const grid = lodash.chunk(oneDimensionalRoom, MAX_WORLD_WIDTH);\n    var easystar = new EasyStar.js();\n    easystar.setGrid(grid);\n    easystar.setAcceptableTiles([0]);\n    easystar.findPath(entityX, entityY, clickedTile.x, clickedTile.y, path => {\n      if (path === null) {\n        // console.log(\"Path was not found.\");\n      } else {\n        // console.log(\n        //   \"Path was found. The first Point is \" + path[0].x + \" \" + path[0].y\n        // );\n        if (entType !== \"player\") {\n          if (\n            path[1].x === this.state.currentTile.x &&\n            path[1].y === this.state.currentTile.y\n          ) {\n            console.log(this.state.currentTile);\n            this.updateTurn();\n          } else {\n            this.moveEntityByPath(path, entType);\n          }\n          //MAKES ENTITIES NEVER OVERLAP THE PLAYER\n        } else if (entType === \"player\") {\n          this.moveEntityByPath(path, entType);\n        }\n      }\n    });\n    easystar.calculate();\n  };\n\n  handleHover = tile => {\n    this.setState({ hoveredTile: tile }, () => {});\n  };\n\n  handleTileClick = tile => {\n    // if (this.state.playerTurn) this.findPath(tile, \"player\");\n  };\n\n  moveEntityByPath = async (path, entType) => {\n    let updatedPath = [];\n    if (entType !== \"player\") {\n      updatedPath.push(path[1]); // THE AMOUNT OF SPACES WE WANT THE ENEMY TO MOVE\n      //SET THE MOVE TO 0 SPACES IF TOUCHING PLAYER\n    }\n    if (entType === \"player\") {\n      updatedPath = path;\n    }\n    const { currentRoom, allEntities } = this.state;\n    let i;\n    for (i = 0; i < updatedPath.length; i++) {\n      var currentTile =\n        currentRoom &&\n        currentRoom.room &&\n        currentRoom.room.find(\n          t => t.x === updatedPath[i].x && t.y === updatedPath[i].y\n        );\n      let entityToMove = allEntities.find(\n        ent => ent.entity && ent.entity.type && ent.entity.type === entType\n      );\n      const entityToMoveIndex = allEntities.indexOf(entityToMove);\n      await this.setState(\n        {\n          allEntities: Object.assign([...allEntities], {\n            [entityToMoveIndex]: {\n              roomId: this.state.currentRoomId,\n              entity: entityToMove.entity,\n              id: currentTile.id\n            }\n          })\n        },\n        () => {\n          this.updateTurn();\n        }\n      );\n    }\n  };\n\n  handleEntityTurn = async () => {\n    const { allEntities, currentRoom } = this.state;\n    let Player = allEntities.find(ent => ent.entity.type === \"player\");\n    const tile =\n      currentRoom &&\n      currentRoom.room &&\n      currentRoom.room.find(t => t.id === Player.id);\n    this.findPath(tile, \"rat\");\n  };\n\n  //RENDERS TILES AND ENTITIES\n  render() {\n    const { currentRoom, currentTurn, currentTile, playerTurn } = this.state;\n    return (\n      <Wrapper className=\"App\">\n        <button onClick={() => this.findPath()}>Test paths</button>\n        <TileContainer className=\"tiles\">\n          {currentRoom && currentRoom.room\n            ? currentRoom.room.map(t => {\n                if (this.produceEntityOnScreen(t.id)) {\n                  const ent = this.produceEntityOnScreen(t.id);\n                  return (\n                    <Tile\n                      onClick={() => this.handleTileClick(t)}\n                      onMouseOver={() => this.handleHover(t)}\n                      lighting={this.generateLighting(t.id)}\n                      id={ent.entity.type === \"player\" ? \"player\" : \"entity\"}\n                      tile={ent.entity.type}\n                      key={ent.id + \"ent\" + Math.random()}\n                    >\n                      {/* conditionally render image */}\n                      {ent.entity.img ? (\n                        <img\n                          className=\"sprite-image\"\n                          src={ent.entity.img}\n                          alt=\"\"\n                        />\n                      ) : (\n                        ent.entity.char\n                      )}\n                      <div className=\"light\" />\n                    </Tile>\n                  );\n                } else if (t.contains) {\n                  return (\n                    <Tile\n                      onClick={() => this.handleTileClick(t)}\n                      onMouseOver={() => this.handleHover(t)}\n                      lighting={this.generateLighting(t.id)}\n                      tile={t.contains.name}\n                      key={t.id + \"tile\" + Math.random()}\n                    >\n                      {/* conditionally render image */}\n                      {t.contains.img ? (\n                        <img\n                          className=\"sprite-image\"\n                          src={t.contains.img}\n                          alt=\"\"\n                        />\n                      ) : (\n                        t.contains.char\n                      )}\n                      <div className=\"light\" />\n                    </Tile>\n                  );\n                } else {\n                  return (\n                    <Tile\n                      onClick={() => this.handleTileClick(t)}\n                      onMouseOver={() => this.handleHover(t)}\n                      lighting={this.generateLighting(t.id)}\n                      tile={t.tile.name}\n                      key={t.id + \"normal\" + Math.random()}\n                    >\n                      {/* conditionally render image */}\n                      {t.tile.img ? (\n                        <img className=\"sprite-image\" src={t.tile.img} alt=\"\" />\n                      ) : (\n                        t.tile.char\n                      )}\n                      <div className=\"light\" />\n                    </Tile>\n                  );\n                }\n              })\n            : null}\n        </TileContainer>\n        <Menu>\n          <div className=\"location\">\n            <div>{currentTurn}</div>\n            <div>player: {playerTurn.toString()}</div>\n            <div>currentTile:{JSON.stringify(currentTile)}</div>\n          </div>\n          <div className=\"controls\">\n            <button onClick={() => this.fireKey(false, \"ArrowUp\", false)}>\n              up\n            </button>\n            <button onClick={() => this.fireKey(false, \"ArrowDown\", false)}>\n              Down\n            </button>\n            <button onClick={() => this.fireKey(false, \"ArrowLeft\", false)}>\n              Left\n            </button>\n            <button onClick={() => this.fireKey(false, \"ArrowRight\", false)}>\n              Right\n            </button>\n          </div>\n        </Menu>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}