{"version":3,"sources":["TestData/entities.js","App.jsx","serviceWorker.js","index.js"],"names":["entities","id","sprite","char","TileContainer","styled","div","_templateObject","Tile","_templateObject2","props","tile","Entity","_templateObject3","App","state","editEntities","editTiles","tileGenerator","roomSize","i","room","LAST_ROW","push","_this","addRandomTiles","curRoom","type","map","randomTile","Math","floor","random","checkNextTileCollide","nextTile","changePlayerPosition","player","move","tiles","find","t","ent","fireKey","event","Player","console","log","key","setState","_this2","this","document","addEventListener","_this$state","react_default","a","createElement","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6d95ea72.chunk.js","sourcesContent":["export const entities = [\n  { id: 14, sprite: 'player', char: '@' },\n  { id: 13, sprite: 'apple', char: '6' },\n]","import React, { Component } from 'react';\nimport './App.css';\nimport styled, { css } from 'styled-components';\nimport { entities } from './TestData/entities';\n\nconst TileContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(10, 50px);\n`\n\nconst Tile = styled.div`\n  height: 50px;\n  width: 50px;\n  background-color: ${props => {\n    switch (props.tile) {\n      case 'wall':\n        return 'black'\n      case 'ground':\n        return 'green'\n      case 'rock':\n        return 'grey'\n      case 'tree':\n        return 'darkgreen'\n      default:\n        break;\n    }\n  }};\n    color: ${props => {\n    switch (props.tile) {\n      case 'wall':\n        return 'black'\n      case 'ground':\n        return 'green'\n      case 'rock':\n        return 'grey'\n      case 'tree':\n        return 'darkgreen'\n      default:\n        break;\n    }\n  }};\n  &:hover{\n    opacity: .8;\n  }\n`\nconst Entity = styled.div`\n  font-size: 40px;\n  height: 50px;\n  width: 50px;\n  color: ${props => {\n    switch (props.tile) {\n      case 'player':\n        return 'pink'\n      case 'apple':\n        return 'red'\n      default:\n        break;\n    }\n  }};\n  &:hover{\n    opacity: .8;\n  }\n`\n\nclass App extends Component {\n  state = {\n    editEntities: entities,\n    editTiles: [],\n  }\n\n  tileGenerator = roomSize => {\n    let room = [];\n    var i;\n    const MAX_ROW_LEN = 10;\n    const FIRST_ROW = 10;\n    const LAST_ROW = roomSize - 9;\n    for (i = 0; i < roomSize; i++) {\n      //Generate Walls\n      if (i + 1 <= FIRST_ROW) { //TOP\n        room.push({ id: i + 1, tile: 'wall' })\n      }\n      else if (i + 1 >= LAST_ROW) { //BOTTOM\n        room.push({ id: i + 1, tile: 'wall' })\n      }\n      else if (i % MAX_ROW_LEN === 0) { //LEFT\n        room.push({ id: i + 1, tile: 'wall' })\n      }\n      else if (i % MAX_ROW_LEN === 9) { //LEFT\n        room.push({ id: i + 1, tile: 'wall' })\n      }\n      else {\n        room.push({ id: i + 1, tile: 'ground' })\n      }\n    }\n    room = this.addRandomTiles(room, 'rock')\n    room = this.addRandomTiles(room, 'tree')\n    return room;\n  }\n\n  addRandomTiles = (curRoom, type) => {\n    const mappedTiles = curRoom.map(tile => {\n      let randomTile = Math.floor(Math.random() * (120 - 1 + 1)) + 1;\n      if (tile.tile !== 'wall') {\n        if (tile.id === (randomTile + 1) || (tile.id === (randomTile - 1) || tile.id === randomTile)) {\n          return { id: tile.id, tile: type }\n        } else return tile\n      } else return tile\n    })\n    return mappedTiles;\n  }\n\n  componentDidMount() {\n    this.setState({ editTiles: this.tileGenerator(120) })\n    document.addEventListener('DOMContentLoaded', () => {\n      'use strict';\n      document.addEventListener('keydown', event => {\n        this.fireKey(event)\n      });\n    });\n  }\n\n  checkNextTileCollide = nextTile => {\n    switch (nextTile) {\n      case 'tree':\n        return true\n      case 'wall':\n        return true\n      default:\n        break;\n    }\n  }\n\n  changePlayerPosition = (player, entities, move, tiles) => {\n    const nextTile = tiles.find(t => t.id === (player.id + move))\n    const newEntities = entities.map(ent => {\n      if (nextTile && ent.id === player.id && !this.checkNextTileCollide(nextTile.tile)) {\n        ent.id += move\n      }\n      return ent\n    })\n    return newEntities;\n  }\n\n  fireKey = (event) => {\n    let Player = this.state.editEntities.find(ent => ent.sprite === 'player')\n    console.log(event)\n    if (event.key === 'ArrowUp') {\n      this.setState({ editEntities: this.changePlayerPosition(Player, this.state.editEntities, -10, this.state.editTiles) })\n    }\n    if (event.key === 'ArrowDown') {\n      this.setState({ editEntities: this.changePlayerPosition(Player, this.state.editEntities, 10, this.state.editTiles) })\n    }\n    if (event.key === 'ArrowRight') {\n      this.setState({ editEntities: this.changePlayerPosition(Player, this.state.editEntities, 1, this.state.editTiles) })\n    }\n    if (event.key === 'ArrowLeft') {\n      this.setState({ editEntities: this.changePlayerPosition(Player, this.state.editEntities, -1, this.state.editTiles) })\n    }\n  }\n  render() {\n    const { editTiles, editEntities } = this.state;\n    return (\n      <div className=\"App\">\n        <TileContainer className='tiles'>\n          {editTiles ? editTiles.map(tile => {\n            return (\n              <Tile tile={tile.tile}>\n                {editEntities ? editEntities.map(ent => {\n                  if (ent.id === tile.id) {\n                    return (<Entity tile={ent.sprite}>{ent.char}</Entity>)\n                  }\n                }) : null}\n              </Tile>\n            )\n          }) : null}\n        </TileContainer>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}