{"version":3,"sources":["constants/constants.js","TestData/entities.js","components/styled.js","data/tileTypes.js","helpers/tileFunctions.js","helpers/moveFunctions.js","App.jsx","serviceWorker.js","index.js"],"names":["MAX_WORLD_WIDTH","MAX_TILES","MAX_WORLD_HEIGHT","entities","id","type","char","img","TileContainer","styled","div","_templateObject","concat","Tile","_templateObject2","props","tile","tileTypes","wall","name","ground","tree","rock","tileGenerator","roomSize","i","room","MAX_ROW_LEN","FIRST_ROW","LAST_ROW","push","addRandomTiles","curRoom","map","t","randomTile","Math","floor","random","changePlayerPosition","player","move","tiles","nextTile","find","ent","checkNextTileCollide","App","state","editEntities","editTiles","fireKey","event","_this$state","_this","Player","key","setState","produceEntityOnScreen","tileId","sentEntity","_this2","this","document","addEventListener","_this3","_this$state2","react_default","a","createElement","className","src","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4f290b5d.chunk.js","sourcesContent":["\nconst MAX_TILES = 24; //MUST BE EVEN NUMBER\nexport const MAX_WORLD_WIDTH = MAX_TILES / 2;\nexport const MAX_WORLD_HEIGHT = MAX_WORLD_WIDTH * MAX_TILES / 2;\nexport const TILE_SIZE = 24;","import { MAX_WORLD_WIDTH, MAX_WORLD_HEIGHT } from '../constants/constants';\nexport const entities = [\n  { id: (MAX_WORLD_HEIGHT / 2) + (MAX_WORLD_WIDTH / 2), type: 'player', char: '@', img: null },\n  { id: (MAX_WORLD_HEIGHT / 2) + (MAX_WORLD_WIDTH / 2) + 2, type: 'apple', char: 'o', img: null },\n]","import styled from 'styled-components';\nimport { MAX_WORLD_WIDTH, TILE_SIZE } from '../constants/constants';\n\nexport const TileContainer = styled.div`\n  display: grid;\n  grid-template-columns: ${`repeat(${MAX_WORLD_WIDTH}, ${TILE_SIZE}px)`};\n`\n\nexport const Tile = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-content: center;\n  justify-content: center;\n  text-align: center;\n  z-index: 0;\n  height: ${`${TILE_SIZE}px`};\n  width: ${`${TILE_SIZE}px`};\n  background-color: ${props => {\n    switch (props.tile) {\n      case 'wall':\n        return 'black'\n      case 'ground':\n        return 'green'\n      case 'rock':\n        return 'grey'\n      case 'tree':\n        return 'darkgreen'\n      case 'player':\n        return 'black'\n      case 'apple':\n        return 'black'\n      default:\n        break;\n    }\n  }};\n    color: ${props => {\n    switch (props.tile) {\n      case 'wall':\n        return 'grey'\n      case 'ground':\n        return 'darkgreen'\n      case 'rock':\n        return 'darkgrey'\n      case 'tree':\n        return 'green'\n\n      case 'player':\n        return 'orange'\n      case 'apple':\n        return 'red'\n      default:\n        break;\n    }\n  }};\n  &:hover{\n    opacity: .8;\n  }\n  .sprite-image{\n    object-fit: cover;\n    height: ${`${TILE_SIZE}px`};\n    width: ${`${TILE_SIZE}px`};\n  }\n`","export const tileTypes = {\n  wall: { name: 'wall', char: 'X', img: null },\n  ground: { name: 'ground', char: 'v', img: null },\n  tree: { name: 'tree', char: 'T', img: null },\n  rock: { name: 'rock', char: 'M', img: null }\n}","import { MAX_WORLD_WIDTH, MAX_WORLD_HEIGHT } from \"../constants/constants\";\nimport { tileTypes } from '../data/tileTypes';\n\nexport const tileGenerator = roomSize => {\n  let room = [];\n  var i;\n  const MAX_ROW_LEN = MAX_WORLD_WIDTH;\n  const FIRST_ROW = MAX_WORLD_WIDTH;\n  const LAST_ROW = roomSize - (MAX_WORLD_WIDTH - 1);\n  for (i = 0; i < roomSize; i++) {\n    //Generate Walls\n    if (i + 1 <= FIRST_ROW) { //TOP\n      room.push({ id: i + 1, tile: tileTypes.wall })\n    }\n    else if (i + 1 >= LAST_ROW) { //BOTTOM\n      room.push({ id: i + 1, tile: tileTypes.wall })\n    }\n    else if (i % MAX_ROW_LEN === 0) { //LEFT\n      room.push({ id: i + 1, tile: tileTypes.wall })\n    }\n    else if (i % MAX_ROW_LEN === (MAX_WORLD_WIDTH - 1)) { //right\n      room.push({ id: i + 1, tile: tileTypes.wall })\n    }\n    else {\n      room.push({ id: i + 1, tile: tileTypes.ground })\n    }\n  }\n  room = addRandomTiles(room, 'rock')\n  room = addRandomTiles(room, 'tree')\n  return room;\n}\n\nexport const addRandomTiles = (curRoom, type) => {\n  const mappedTiles = curRoom.map(t => {\n    let randomTile = Math.floor(Math.random() * (MAX_WORLD_HEIGHT - 1 + 1)) + 1;\n    if (t.tile.name !== 'wall') {\n      if (t.id === (randomTile + 1) || (t.id === (randomTile - 1) || t.id === randomTile)) {\n        return { id: t.id, tile: tileTypes[type] }\n      } else return t\n    } else return t\n  })\n  return mappedTiles;\n}\n\n\nexport const mapGenerator = () => {\n\n}","export const checkNextTileCollide = nextTile => {\n  switch (nextTile) {\n    case 'tree':\n      return true\n    case 'wall':\n      return true\n    default:\n      break;\n  }\n}\n\nexport const changePlayerPosition = (player, entities, move, tiles) => {\n  const nextTile = tiles.find(t => t.id === (player.id + move))\n  const newEntities = entities.map(ent => {\n    if (nextTile && ent.id === player.id && !checkNextTileCollide(nextTile.tile.name)) {\n      ent.id += move\n    }\n    return ent\n  })\n  return newEntities;\n}","import React, { Component } from 'react';\nimport { MAX_WORLD_WIDTH, MAX_WORLD_HEIGHT } from './constants/constants';\nimport { entities } from './TestData/entities';\nimport { TileContainer, Tile } from './components/styled';\nimport { tileGenerator } from './helpers/tileFunctions';\nimport { changePlayerPosition } from './helpers/moveFunctions';\n\nclass App extends Component {\n  state = {\n    editEntities: entities,\n    editTiles: [],\n  }\n\n  //ADDS TILES AND ADDS EVENT LISTENERS FOR KEYS\n  componentDidMount() {\n    this.setState({ editTiles: tileGenerator(MAX_WORLD_HEIGHT) })\n    document.addEventListener('DOMContentLoaded', () => {\n      document.addEventListener('keydown', event => {\n        this.fireKey(event)\n      });\n    });\n  }\n\n  //PLAYER KEYS\n  fireKey = (event) => {\n    const { editEntities, editTiles } = this.state;\n    let Player = editEntities.find(ent => ent.type === 'player')\n    if (event.key === 'ArrowUp') {\n      this.setState({ editEntities: changePlayerPosition(Player, editEntities, -(MAX_WORLD_WIDTH), editTiles) })\n    }\n    if (event.key === 'ArrowDown') {\n      this.setState({ editEntities: changePlayerPosition(Player, editEntities, MAX_WORLD_WIDTH, editTiles) })\n    }\n    if (event.key === 'ArrowRight') {\n      this.setState({ editEntities: changePlayerPosition(Player, editEntities, 1, editTiles) })\n    }\n    if (event.key === 'ArrowLeft') {\n      this.setState({ editEntities: changePlayerPosition(Player, editEntities, -1, editTiles) })\n    }\n  }\n\n  produceEntityOnScreen = tileId => {\n    const { editEntities } = this.state;\n    const sentEntity = editEntities.find(ent => {\n      if (ent.id === tileId) {\n        return ent\n      }\n    })\n    if (sentEntity)\n      return sentEntity\n  };\n\n\n  //RENDERS TILES AND ENTITIES\n  render() {\n    const { editTiles, editEntities } = this.state;\n    return (\n      <div className=\"App\" >\n        <TileContainer className='tiles'>\n          {editTiles ? editTiles.map(t => {\n            if (this.produceEntityOnScreen(t.id)) {\n              const ent = this.produceEntityOnScreen(t.id)\n              return (\n                <Tile tile={ent.type} key={ent.id}>\n                  {/* conditionally render image */}\n                  {ent.img ? (\n                    <img className='sprite-image' src={ent.img} alt=\"\" />\n                  ) : ent.char}\n                </Tile>\n              )\n            } else {\n              return (\n                <Tile tile={t.tile.name} key={t.id}>\n                  {/* conditionally render image */}\n                  {t.tile.img ? (\n                    <img className='sprite-image' src={t.tile.img} alt=\"\" />\n                  ) : t.tile.char}\n                </Tile>\n              )\n            }\n          }) : null}\n        </TileContainer>\n      </div >\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}