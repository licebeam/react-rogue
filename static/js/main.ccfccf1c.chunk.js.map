{"version":3,"sources":["constants/constants.js","components/styled.js","data/tileTypes.js","data/itemTypes.js","helpers/tileFunctions.js","helpers/moveFunctions.js","data/entityTypes.js","App.jsx","serviceWorker.js","index.js"],"names":["MAX_WORLD_WIDTH","MAX_TILES","MAX_WORLD_HEIGHT","TileContainer","styled","div","_templateObject","concat","Tile","_templateObject2","props","tile","tileTypes","wall","name","char","img","ground","dirt","tree","rock","portal","itemTypes","dungeonGenerator","roomSize","currentFloorPlayerLoc","oldRoom","dungeonRows","NewDungeon","width","height","minRoomSize","maxRoomSize","map","row","index","i","rowIndex","rowMultiplier","id","checkTileType","push","room","Object","toConsumableArray","Set","flattenDeep","filter","g","addStairs","addRandomTiles","addRandomItems","curRoom","type","t","randomTile","Math","floor","random","randomItem","length","contains","newTiles","allGroundTiles","freeLocation","freeLocationIndex","indexOf","changePlayerPosition","player","entities","move","tiles","currentFloor","nextTile","find","nextEntity","e","roomId","ent","checkNextTileCollide","entityTypes","App","state","currentRoom","currentRoomId","allRooms","allEntities","loading","currentTurn","playerTurn","othersTurn","currentTile","keyPress","changeRooms","_this","setState","generateRooms","roomAmount","rooms","currentFloorStairLoc","en","entity","k","addPlayerOnStart","entityGenerator","flatten","fireKey","event","key","checkHold","_this$state","Player","editEntities","updateTurn","releaseKeys","_this$state2","playerLocation","playerTile","randomEntity","produceEntityOnScreen","tileId","_this$state3","sentEntity","_this2","this","document","addEventListener","window","prevProps","prevState","_this$state4","playerIndex","assign","defineProperty","_this3","_this$state5","react_default","a","createElement","className","src","alt","toString","JSON","stringify","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ccfccf1c.chunk.js","sourcesContent":["\nexport const MAX_TILES = 60; //MUST BE EVEN NUMBER\nexport const MAX_WORLD_WIDTH = MAX_TILES / 2;\nexport const MAX_WORLD_HEIGHT = MAX_WORLD_WIDTH * MAX_TILES / 2;\nexport const TILE_SIZE = 16;","import styled from 'styled-components';\nimport { MAX_WORLD_WIDTH, TILE_SIZE } from '../constants/constants';\n\nexport const TileContainer = styled.div`\n  display: grid;\n  grid-template-columns: ${`repeat(${MAX_WORLD_WIDTH}, ${TILE_SIZE}px)`};\n`\n\nexport const Tile = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-content: center;\n  justify-content: center;\n  text-align: center;\n  z-index: 0;\n  height: ${`${TILE_SIZE}px`};\n  width: ${`${TILE_SIZE}px`};\n  background-color: ${props => {\n    switch (props.tile) {\n      //TILES\n      case 'wall':\n        return 'black'\n      case 'ground':\n        return 'green'\n      case 'dirt':\n        return 'burlywood'\n      case 'rock':\n        return 'grey'\n      case 'tree':\n        return 'darkgreen'\n      //ENTITIES\n      case 'player':\n        return 'black'\n      case 'rat':\n        return 'black'\n      case 'cat':\n        return 'black'\n      //ITEMS\n      case 'apple':\n        return 'green'\n      case 'orange':\n        return 'green'\n      case 'stone':\n        return 'green'\n      default:\n        break;\n    }\n  }};\n    color: ${props => {\n    switch (props.tile) {\n      //TILES\n      case 'wall':\n        return 'grey'\n      case 'ground':\n        return 'darkgreen'\n      case 'dirt':\n        return 'brown'\n      case 'rock':\n        return 'darkgrey'\n      case 'tree':\n        return 'green'\n      //ENTITIES\n      case 'player':\n        return 'orange'\n      case 'rat':\n        return 'red'\n      case 'cat':\n        return 'brown'\n      //ITEMS\n      case 'apple':\n        return 'red'\n      case 'orange':\n        return 'orange'\n      case 'stone':\n        return 'brown'\n      default:\n        break;\n    }\n  }};\n  &:hover{\n    opacity: .8;\n  }\n  .sprite-image{\n    object-fit: cover;\n    height: ${`${TILE_SIZE}px`};\n    width: ${`${TILE_SIZE}px`};\n  }\n`","export const tileTypes = {\n  wall: { name: 'wall', char: 'X', img: null },\n  ground: { name: 'ground', char: 'v', img: null },\n  dirt: { name: 'dirt', char: '^', img: null },\n  tree: { name: 'tree', char: 'T', img: null },\n  rock: { name: 'rock', char: 'M', img: null },\n  portal: { name: 'portal', char: 'Z', img: null },\n}","export const itemTypes = [\n  { name: 'apple', char: '9', img: null },\n  { name: 'orange', char: '0', img: null },\n  { name: 'stone', char: '.', img: null },\n  { name: 'sword', char: '/', img: null },\n]","import { MAX_WORLD_HEIGHT, MAX_TILES } from \"../constants/constants\";\nimport { tileTypes } from '../data/tileTypes';\nimport { itemTypes } from '../data/itemTypes';\nimport { NewDungeon } from 'random-dungeon-generator';\nimport { flattenDeep } from 'lodash';\n\nconst checkTileType = (tile, i, rowIndex) => {\n  var rowMultiplier = rowIndex >= 1 ? (rowIndex * MAX_TILES / 2) - 1 : rowIndex;\n  switch (tile) {\n    case 0:\n      return { id: (i + 1) + rowMultiplier, tile: tileTypes.ground }\n    case 1:\n      return { id: (i + 1) + rowMultiplier, tile: tileTypes.wall }\n    default:\n      return { id: (i + 1) + rowMultiplier, tile: tileTypes.ground }\n  }\n}\n\nexport const dungeonGenerator = (roomSize, currentFloorPlayerLoc) => {\n\n  const dungeon = NewDungeon({\n    width: MAX_TILES / 2,\n    height: MAX_TILES / 2,\n    minRoomSize: 10,\n    maxRoomSize: 10,\n  })\n  let oldRoom = [];\n\n  const dungeonRows = dungeon.map((row, index) => {\n    return row.map((tile, i) => { return checkTileType(tile, i, index) })\n  })\n  oldRoom.push(dungeonRows)\n  let room = [...new Set(flattenDeep(oldRoom.filter(g => g)))]\n  room = flattenDeep(room)\n  room = addStairs(room, 'portal', currentFloorPlayerLoc)\n  room = addRandomTiles(room, 'rock')\n  room = addRandomTiles(room, 'tree')\n  room = addRandomTiles(room, 'rock')\n  room = addRandomTiles(room, 'tree')\n  room = addRandomTiles(room, 'dirt')\n  room = addRandomTiles(room, 'dirt')\n  room = addRandomItems(room)\n  room = addRandomItems(room)\n  room = addRandomItems(room)\n  return room;\n}\n\nexport const addRandomTiles = (curRoom, type) => {\n  const mappedTiles = curRoom.map(t => {\n    let randomTile = Math.floor(Math.random() * (MAX_WORLD_HEIGHT - 1 + 1)) + 1;\n    if (t.tile.name !== 'wall') {\n      if (t.id === (randomTile + 1) || (t.id === (randomTile - 1) || t.id === randomTile)) {\n        return { id: t.id, tile: tileTypes[type] }\n      } else return t\n    } else return t\n  })\n  return mappedTiles;\n}\n\nexport const addRandomItems = (curRoom) => {\n  const mappedTiles = curRoom.map(t => {\n    const type = t.tile.name;\n    let randomItem = Math.floor(Math.random() * (itemTypes.length)) + 0;\n    let randomTile = Math.floor(Math.random() * (MAX_WORLD_HEIGHT)) + 1;\n    if (t.tile.name !== 'wall') {\n      if (t.id === (randomTile + 1) || (t.id === (randomTile - 1) || t.id === randomTile)) {\n        return { id: t.id, tile: tileTypes[type], contains: itemTypes[randomItem] } // change to object\n      } else return t\n    } else return t\n  })\n  return mappedTiles;\n}\n\nexport const addStairs = (curRoom, type, currentFloorPlayerLoc) => {\n  let newTiles = curRoom;\n  const allGroundTiles = newTiles.filter(g => g.tile.name === 'ground')\n  var freeLocation = allGroundTiles[Math.floor(Math.random() * allGroundTiles.length)];\n  const freeLocationIndex = newTiles.indexOf(freeLocation)\n  if (freeLocation.contains || freeLocation.id === currentFloorPlayerLoc) {\n    return addStairs(curRoom, type);\n  }\n  newTiles[freeLocationIndex].tile = tileTypes[type];\n  return newTiles;\n}","export const checkNextTileCollide = nextTile => {\n  switch (nextTile) {\n    case 'tree':\n      return true\n    case 'wall':\n      return true\n    default:\n      break;\n  }\n}\n\nexport const changePlayerPosition = (player, entities, move, tiles, currentFloor) => {\n  const nextTile = tiles.find(t => t.id === (player.id + move))\n  const nextEntity = entities.find(e => e.id === (nextTile.id) && e.roomId === currentFloor)\n  const newEntities = entities.map(ent => {\n    if (nextTile && ent.id === player.id && !checkNextTileCollide(nextTile.tile ? nextTile.tile.name : nextTile.contains.name) && !nextEntity) {\n      ent.id += move\n    }\n    return ent\n  })\n  return newEntities;\n}","export const entityTypes = [\n  { type: 'rat', char: '~o', img: null },\n  { type: 'cat', char: '~m', img: null },\n]","import React, { Component } from 'react';\nimport { MAX_WORLD_WIDTH, MAX_WORLD_HEIGHT } from './constants/constants';\nimport { TileContainer, Tile } from './components/styled';\nimport { dungeonGenerator } from './helpers/tileFunctions';\nimport { changePlayerPosition } from './helpers/moveFunctions';\nimport { flatten } from 'lodash';\nimport { entityTypes } from './data/entityTypes';\n\nclass App extends Component {\n  state = {\n    currentRoom: [],\n    currentRoomId: 0,\n    allRooms: [],\n    allEntities: [],\n    loading: false,\n    currentTurn: 0,\n    playerTurn: true,\n    othersTurn: false,\n    currentTile: '',\n    keyPress: false,\n  }\n\n  //ADDS TILES AND ADDS EVENT LISTENERS FOR KEYS\n  componentDidMount() {\n    this.setState({ rooms: this.generateRooms(MAX_WORLD_HEIGHT, 11) }, () => { //AMOUNT OF ROOMS IS -1;\n      this.setState({ currentRoom: this.state.allRooms[this.state.currentRoomId] })\n    })\n    document.addEventListener('DOMContentLoaded', () => {\n      window.addEventListener('keydown', event => {\n        this.fireKey(event, false, true)\n      });\n      window.addEventListener('keyup', event => {\n        this.releaseKeys(event)\n      });\n    });\n  }\n\n  changeRooms = () => {\n    if (this.state.currentRoomId < this.state.allRooms.length - 1)\n      this.setState({ currentRoomId: this.state.currentRoomId + 1, loading: true }, () => {\n        this.setState({ currentRoom: this.state.allRooms[this.state.currentRoomId], loading: false })\n      })\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { allEntities, currentRoom } = this.state;\n    const playerLocation = allEntities.length && allEntities.find(e => e.entity.type === 'player').id;\n    const downLocation = currentRoom && currentRoom.room && currentRoom.room.find(t => t.tile.name === 'portal').id;\n    if (playerLocation === downLocation && this.state.loading === false) {\n      this.changeRooms();\n    }\n    if (prevState.currentRoomId !== this.state.currentRoomId) {\n      let player = allEntities.find(ent => ent.entity.type === 'player')\n      const playerIndex = allEntities.indexOf(player)\n      this.setState({ allEntities: Object.assign([...allEntities], { [playerIndex]: { roomId: this.state.currentRoomId, id: player.id, entity: player.entity } }) })\n    }\n  }\n\n  generateRooms = (roomSize, roomAmount) => {\n    const { allEntities } = this.state;\n    var rooms = []\n    var entities = []\n    var i = 0;\n    const currentFloorStairLoc = rooms.length && rooms[i].find(t => t.tile.name === 'portal').id || null;\n    const currentFloorPlayerLoc = allEntities.length && allEntities.find(en => en.entity.type === 'player').id || null\n    for (i = 0; i < roomAmount; i++) {\n      rooms.push({ roomId: i, room: dungeonGenerator(roomSize, currentFloorStairLoc, currentFloorPlayerLoc) });\n    }\n    return this.setState({ allRooms: rooms }, () => {\n      //Generate All Entities for floor.\n      var k = 0;\n      for (k = 0; k < roomAmount; k++) {\n        if (k === 0) {\n          entities.push(this.addPlayerOnStart(this.state.allRooms[k].room));\n        }\n        entities.push(this.entityGenerator(this.state.allRooms[k].room, k));\n      }\n      this.setState({ allEntities: flatten(entities) })\n    })\n  }\n\n  //PLAYER KEYS\n  fireKey = (event, key, checkHold) => {\n    const { allEntities, currentRoom, currentRoomId, keyPress } = this.state;\n    if (checkHold) {\n      //Checks if user is holding key\n      this.setState({ keyPress: true })\n    }\n    let Player = allEntities.find(ent => ent.entity.type === 'player')\n    if (key === 'ArrowUp' || event.key === 'ArrowUp' && keyPress === false) {\n      this.setState({ editEntities: changePlayerPosition(Player, allEntities, -(MAX_WORLD_WIDTH), currentRoom.room, currentRoomId) })\n      this.updateTurn()\n    }\n    if (key === 'ArrowDown' || event.key === 'ArrowDown' && keyPress === false) {\n      this.setState({ editEntities: changePlayerPosition(Player, allEntities, MAX_WORLD_WIDTH, currentRoom.room, currentRoomId) })\n      this.updateTurn()\n    }\n    if (key === 'ArrowRight' || event.key === 'ArrowRight' && keyPress === false) {\n      this.setState({ editEntities: changePlayerPosition(Player, allEntities, 1, currentRoom.room, currentRoomId) })\n      this.updateTurn()\n    }\n    if (key === 'ArrowLeft' || event.key === 'ArrowLeft' && keyPress === false) {\n      this.setState({ editEntities: changePlayerPosition(Player, allEntities, -1, currentRoom.room, currentRoomId) })\n      this.updateTurn()\n    }\n  }\n  //PLAYER KEYS\n  releaseKeys = () => {\n    this.setState({ keyPress: false })\n  }\n\n  updateTurn = () => {\n    const { allEntities, currentRoom } = this.state;\n    const playerLocation = allEntities.find(e => e.entity.type === 'player');\n    //this method also stores the current player tile every turn; \n    const playerTile = currentRoom.room.find(t => t.id === playerLocation.id)\n    this.setState({ playerTurn: !this.state.playerTurn, currentTurn: this.state.currentTurn + 1, currentTile: playerTile })\n  }\n\n  entityGenerator = (curRoom, roomId) => {\n    const entities = curRoom.map(t => {\n      let randomEntity = Math.floor(Math.random() * (entityTypes.length)) + 0;\n      let randomTile = Math.floor(Math.random() * (MAX_WORLD_HEIGHT)) + 1;\n      if (t.tile.name !== 'wall') {\n        if (t.id === randomTile) {\n          return { roomId, id: t.id, entity: entityTypes[randomEntity] } // change to object\n        } else return null\n      } else return null\n    })\n    const flattenedEntities = entities.filter(e => e)\n    return flattenedEntities;\n  }\n\n  addPlayerOnStart = curRoom => {\n    const allGroundTiles = curRoom.filter(g => g.tile.name === 'ground');\n    var freeLocation = allGroundTiles[Math.floor(Math.random() * allGroundTiles.length)];\n    if (!freeLocation.contains) {\n      return { roomId: this.state.currentRoomId, id: freeLocation.id, entity: { type: 'player', char: '@', img: null } }\n    }\n  }\n\n  produceEntityOnScreen = tileId => {\n    const { allEntities, currentRoomId } = this.state;\n    const sentEntity = allEntities.find(ent => {\n      if (ent && ent.id && ent.id === tileId && currentRoomId === ent.roomId && ent.type !== 'player') {\n        return ent.entity\n      }\n      if (ent && ent.id && ent.id === tileId && ent.type === 'player') {\n        return ent.entity\n      }\n    })\n    if (sentEntity)\n      return sentEntity\n  };\n\n  //RENDERS TILES AND ENTITIES\n  render() {\n    const { currentRoom, currentTurn, currentTile, playerTurn } = this.state;\n    return (\n      <div className=\"App\" >\n        <TileContainer className='tiles'>\n          {currentRoom && currentRoom.room ? currentRoom.room.map(t => {\n            if (this.produceEntityOnScreen(t.id)) {\n              const ent = this.produceEntityOnScreen(t.id)\n              return (\n                <Tile tile={ent.entity.type} key={ent.id + \"ent\" + Math.random()}>\n                  {/* conditionally render image */}\n                  {ent.entity.img ? (\n                    <img className='sprite-image' src={ent.entity.img} alt=\"\" />\n                  ) : ent.entity.char}\n                </Tile>\n              )\n            }\n            else if (t.contains) {\n              return (\n                <Tile tile={t.contains.name} key={t.id + \"tile\" + Math.random()}>\n                  {/* conditionally render image */}\n                  {t.contains.img ? (\n                    <img className='sprite-image' src={t.contains.img} alt=\"\" />\n                  ) : t.contains.char}\n                </Tile>\n              )\n            }\n            else {\n              return (\n                <Tile tile={t.tile.name} key={t.id + \"normal\" + Math.random()}>\n                  {/* conditionally render image */}\n                  {t.tile.img ? (\n                    <img className='sprite-image' src={t.tile.img} alt=\"\" />\n                  ) : t.tile.char}\n                </Tile>\n              )\n            }\n          }) : null}\n        </TileContainer>\n        <div>{currentTurn}</div>\n        <div>player: {playerTurn.toString()}</div>\n        <div>currentTile:{JSON.stringify(currentTile)}</div>\n\n        <button onClick={() => this.fireKey(false, 'ArrowUp', false)}>up</button>\n        <button onClick={() => this.fireKey(false, 'ArrowDown', false)}>Down</button>\n        <button onClick={() => this.fireKey(false, 'ArrowLeft', false)}>Left</button>\n        <button onClick={() => this.fireKey(false, 'ArrowRight', false)}>Right</button>\n      </div >\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}